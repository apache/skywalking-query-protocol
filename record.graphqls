# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Since 9.3.0
# Record is a general and abstract type for collected raw data.
# In the observability, traces and logs have specific and well-defined meanings, and the general records represent other
# collected records. Such as sampled slow SQL statement, HTTP request raw data(request/response header/body)
extend type Query {
    # Query collected records with given metric name and parent entity conditions, and return in the requested order.
    readRecords(condition: RecordCondition!, duration: Duration!): [Record!]!
}

input RecordCondition {
    # Metrics name
    # The scope of this metric is required to match the scope of the parent entity.
    name: String!
    # Follow entity definition description.
    # The owner of the sampled records
    parentEntity: Entity!
    topN: Int!
    order: Order!
}

type Record {
    # Literal string name for visualization
    name: String!
    # ID of this record
    id: ID!
    # Usually an integer value as this is a metric to measure this entity ID.
    value: String
    # Have value, Only if the record has related trace id.
    # UI should show this as an attached value.
    refId: ID
}