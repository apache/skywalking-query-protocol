# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Save service policy
input ContinuousProfilingServicePolicySaveRequest {
    # service of the policy
    serviceId: ID!
    # target of the policy
    targets: [ContinuousProfilingServicePolicyTargetSaveRequest!]!
}

input ContinuousProfilingServicePolicyTargetSaveRequest {
    targetType: ContinuousProfilingTargetType!
    checkItems: [ContinuousProfilingServicePolicyItemSaveRequest!]!
}

# Policy item of continuous profiling
input ContinuousProfilingServicePolicyItemSaveRequest {
    # define the monitor type to collect metrics
    type: ContinuousProfilingMonitorType!
    # threshold of policy, which decide by the monitor type
    threshold: String!
    # the length of time to evaluate the metrics
    period: Int!
    # how many times after the metrics match the threshold, will trigger profiling
    count: Int!
    # the URI path/regex filter when monitor the HTTP related types
    uriList: [String!]
    uriRegex: String
}

enum ContinuousProfilingMonitorType {
    # monitoring Process CPU percent, value in [0-100]
    PROCESS_CPU,
    # monitoring process thread count, value must bigger than zero
    PROCESS_THREAD_COUNT,
    # monitoring current system load
    SYSTEM_LOAD,
    # monitoring the process HTTP response error(status>=500) percent, value in [0-100]
    HTTP_ERROR_RATE,
    # monitoring the process HTTP response duration(ms)
    HTTP_AVG_RESPONSE_TIME
}

enum ContinuousProfilingTargetType {
    # eBPF On CPU Profiling
    ON_CPU,
    # eBPF Off CPU Profiling
    OFF_CPU,
    # eBPF Network Profiling
    NETWORK
}

type ContinuousProfilingSaveResult {
    # TRUE if the policy is created successfully
    status: Boolean!
    # error reason when status == FALSE
    errorReason: String
}

type ContinuousProfilingServicePolicyTarget {
    targetType: ContinuousProfilingTargetType!
    checkItems: [ContinuousProfilingServicePolicyItem!]!
}

# Similar with ContinuousProfilingServicePolicyItemSaveRequest
type ContinuousProfilingServicePolicyItem {
    type: ContinuousProfilingMonitorType!
    threshold: String!
    period: Int!
    count: Int!
    uriList: [String!]
    uriRegex: String
}

type ContinuousProfilingTriggeredTask {
    # ID of task
    taskId: ID!
    # triggered threshold process entity metadata
    serviceId: ID!
    serviceName: String!
    serviceInstanceId: ID!
    serviceInstanceName: String!
    processId: ID!
    processName: String!

    # triggered threshold causes
    causes: [ContinuousProfilingReportedTaskCause!]!

    # target profiling task type
    targetType: ContinuousProfilingTargetType!
    # task start timestamp(ms)
    startTime: Long!
    # time execute duration(s)
    duration: Long!
}

type ContinuousProfilingReportedTaskCause {
    # which type is reached the threshold
    # all causes threshold and current value has multiply with "100" for avoid float value
    type: ContinuousProfilingMonitorType!
    # single value based cause
    singleValue: ContinuousProfilingSingleValueCause
    # uri based cause
    uri: ContinuousProfilingURICause
}

type ContinuousProfilingSingleValueCause {
    # defined threshold
    threshold: Long!
    # current value of the process
    current: Long!
}

type ContinuousProfilingURICause {
    # which URI triggered threshold(one of)
    uriRegex: String
    uriPath: String
    # defined threshold
    threshold: Long!
    # current value of the process URI
    current: Long!
}

extend type Mutation {
    # create a new continuous profiling task
    saveContinuousProfilingPolicy(request: ContinuousProfilingServicePolicySaveRequest!): ContinuousProfilingSaveResult!
}

extend type Query {
    # query all continuous profiling task through service
    queryContinuousProfilingServiceTargets(serviceId: ID!): [ContinuousProfilingServicePolicyTarget!]!
    # query the triggered eBPF profiling task from continuous profiling task ID
    queryContinuousProfilingTriggeredTasks(serviceId: ID!, targetType: ContinuousProfilingTargetType!, duration: Duration!): [ContinuousProfilingTriggeredTask!]!
}